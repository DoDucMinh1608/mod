var maps = [
  "                                                   3959344792                   \n" +
  "                                   718986124913973613462771413524               \n" +
  "                                   7669946824123196795988179833732      8976678 \n" +
  "   36279                           5591122198568942622    1831693666    7747294 \n" +
  "   62876                                                      4619769   1143455 \n" +
  "   67722            7153437     133                       865349411351  2211952 \n" +
  "   19542            1458991     712    96547326295        28513  39686  9513819 \n" +
  "   87526            4681366     382    96268286388        24351    467  6552632 \n" +
  "                    5755425            67192651253        95366    136  8893844 \n" +
  "                    8352187            61535323398        35171                 \n" +
  "         747536981  6741434      749   65931317141                              \n" +
  "         642662399  94672114526  494   54719717537                              \n" +
  "         237244268      7669293  122   91813255544                              \n" +
  "         311612893      6948516  291   56395581374                              \n" +
  "         843492743      5452195  3793  13981125533                              \n" +
  "    154  891125631      9516439  8137  95587847328           78969839197        \n" +
  "    847  726777499      1389898  9945  66781126589           18138985389   934  \n" +
  "    635  425915326      7455581   3685                       96117168417   552  \n" +
  "         395377679                8228                       11834219969   276  \n" +
  "                                  14899                      77715568213   294  \n" +
  "                                   7345               24549  18893345716   4399 \n" +
  "                                   32719              61155  17892221521   4247 \n" +
  "      72835                         3382              13185  57714825516   7531 \n" +
  "      12539   893     63263751354   2166              57754  54597795619    556 \n" +
  "      74358   647     45183615172    251  4119626     48376  98712754258    696 \n" +
  "      83558   258     43431918128    317  7196649            85483556494    5261\n" +
  "      82622           99144373228         9735262                           1555\n" +
  "                      79164879483         5956981                           6644\n" +
  "                      96491744867         6248256     6973          1678828  962\n" +
  "                      44576954885         5712954     6713          8373382  145\n" +
  "  451       793       39255959252         5999797   658636          2447162  646\n" +
  "  522       962       75831824191                  381417           2745128  749\n" +
  "  318       332       29729526474   766          5163344 3399556    4961996  475\n" +
  "                      46994753389   734     11746145631  3239358    5863727  634\n" +
  "                                    763733722568872148   2133676    4465338  489\n" +
  " 961245123            785             83732696712596     1676387            5688\n" +
  " 524295887            452             37128789           7526741            2539\n" +
  " 894777594            135             181            359 6795946            4799\n" +
  " 145874325     65848                       384926789 258 9953763            366 \n" +
  " 264565928     32716                       298361421 675                    391 \n" +
  " 522581575     85675                       411426542 622          912419378     \n" +
  " 176326934     86442      1619231          753438247 214          594269624     \n" +
  " 742455288     97145      9562892          714882796 561          786487351     \n" +
  " 856261968                1481712          528258964 847          426868682     \n" +
  "                91497     5473592          934838699 865  717     324872281     \n" +
  "                25372     6829869  292     593346825 618  191     278524483     \n" +
  "          385   19141     3245518  371     794673982 829  534     666718999     \n" +
  "          272   39463     1595895  499               2381         114194531     \n" +
  "          481                                        4772         839172164     \n" +
  "                                                     7169                       \n" +
  "                45975364396                                                     \n" +
  "                21497738683               53552                                 \n" +
  "                78114551732               44398   241                           \n" +
  "                84744671934               37772   118     78537893675           \n" +
  "    63747       34552724918               42477   161     36365176714           \n" +
  "    68319       99829972612        913    12145           46692542931           \n" +
  "    28287       46491779639        458                    16112349479    951    \n" +
  "    47665       91472158461        228                    16684179835    461    \n" +
  "    86814       45514383413                               14823274933    338    \n" +
  "                67553966948            3824113            96312874699           \n" +
  "                41994926643            6327782    844     71171985928           \n" +
  "                                       4449189    689     77633242158           \n" +
  "                                       2456457    148     34242413246           \n" +
  "                           8462        5588393            38512752513           \n" +
  "                 65431     38686586    4132378                               989\n" +
  "                 36974     33571516728 4362351                        8279133279\n" +
  "                 31484       4646157221171                   6693523889571285922\n" +
  "                 17646          481911535374768856837627888343211269982659899788\n" +
  "                 72953             34287984139181689277681815214573324838       \n" +
  "                                       236715986696281216236524                 \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                ",

  "                 9481            861            354         2636                \n" +
  "                 19185           9658           2151        34986               \n" +
  "      6489       972584          67756          61993       562516              \n" +
  "      37795       7324679         17543          16597        861583            \n" +
  "      856732       3284399         574614        8717132      7192341           \n" +
  "       5453739       5659516        681476         521326      28319364         \n" +
  "        1348421       6164361        7333164        2787665      7232677        \n" +
  "11        863922        999494         2276699        7276444      656738       \n" +
  "4335       276743         84824         6465395        5796681      4597149     \n" +
  "75637       368524        6953491          4869243      796525       9728811    \n" +
  "36375856     7591577        3564482         941183586      895         987519   \n" +
  " 351942441    2484118        21475488         9261262125          88    659198  \n" +
  "   969396829   2934312         77423373          277623885         79    6591288\n" +
  "59    1924321    22189523       159267283          996955264        64     17277\n" +
  " 68     8844913   53914549        798847899           82313594        9     1764\n" +
  "4738     9674944    95729928        52833356            1318847        369   712\n" +
  "315388     381928     69552498        628862              5664294        2781 79\n" +
  "6162824     836849     52846747         5179               69797767         198 \n" +
  " 5966327     1842177     27134964              789           1816724          22\n" +
  "  1856768      947284      87544954            527             8165875         4\n" +
  "   73699438     112249      85669848           416               6128696        \n" +
  "     75926162     3467118     49638589           7    934         2154361       \n" +
  "      66177 7948  5457984       8899219          3    25448         222765      \n" +
  "       64528   787  81424        3769878         29   6426346        8856933    \n" +
  "        37998    9583              2947761        915 95981121         312738   \n" +
  "         869895     434             4683873         7   58771646        939989  \n" +
  "11        1819343     659  35         5252714       26    84929771       517763 \n" +
  "252        8716975      1791           62672784      47    17269713       514457\n" +
  "89364        1493296           7314      25436551      32     6193542      79599\n" +
  "926377         938237          18928       41982144     165    4566347       423\n" +
  " 6662977        684544         8981559      45936389      74     7318413      71\n" +
  "   234191         429261        9614368       11462217      864   1169715       \n" +
  "    443686         3337658       913279398      3116358       462   3547936     \n" +
  "     8183431        36759747       159642298      455364        36   576118     \n" +
  "       4878138        427341881      78549934      2915421       79    56886    \n" +
  "112     516919          32636187       833293       2234734       729   22623   \n" +
  "1347     31166            6989912693     4426         59468677      13   76558  \n" +
  "3829                         51238295                  79867143       81  7298  \n" +
  " 72762                         799958178          387    2558987       73 2362  \n" +
  "  4215                            98775296        239      7818775      37      \n" +
  "  17956                            378473828      143       85948495     35     \n" +
  "   65773    2       265               5937761            5    64882336    89    \n" +
  "    35161    9      9911               3971877            9     5469334     5   \n" +
  "     6572     57    42639                3899658           53    49673432   92  \n" +
  "4     4931     58   295458                58793119          373    41931799     \n" +
  "19    67324      13   73311      9581       48163855           38    25519982   \n" +
  " 227   36118      91   193983       38       351769947           9541  7332384  \n" +
  "   59   89752      24   941563        52        94531889            838  3245353\n" +
  "    27   35576       64   613635        54        66457462             492979142\n" +
  "      89  96371       37  91114966       527       817394967             78 1644\n" +
  "       68  786777       45  8875562        258       163221495            232964\n" +
  " 698    86  34897        574  781588         9938       18198269            66  \n" +
  " 142     96  165388        51   855291          5583      48876646           37 \n" +
  " 348      46  366971         981 6648279           4916     656331652         13\n" +
  " 5369      64  5857612         86 1717974             46      779456967        8\n" +
  " 74576      93   561691         595 2856235            313      78511576        \n" +
  " 614685      33   68445337           13612968            429       695241       \n" +
  "  543453       16  898279657           2392357             833      2398874     \n" +
  "   6589272      69    51742339458        372341              6        141849    \n" +
  "    3638438      944    3284156164        9835444                      99632181 \n" +
  "9     8431844      888    32886545          55589426                    48594627\n" +
  " 15    3683189       915       765           472587668          321       926292\n" +
  "  19     5245195                               93786792         1285        7375\n" +
  "    43     8346949                                99965591      31323         44\n" +
  "     141    9327321                                474325972    337733  21      \n" +
  "       92    46366355       171                      85423246     4593   738    \n" +
  "847     43     79884636     953              295       1664726     27135   79   \n" +
  "9226      89     6183288    811    625       2748        13532     49988    246 \n" +
  "85325      783    487777    649    1181      54462         968      655697    66\n" +
  "897699       77     9479    339    833823    977538                  46518      \n" +
  " 542652       11            7699    627842    718971         32       26169     \n" +
  "   769362      54           3847     8231651   4417993        939      37656    \n" +
  "   4797577       31         86746     1788246   22758337        842     59352   \n" +
  "     4684789      26         3174       8418391  71667692         267   574923  \n" +
  "      4582427      954        2493        444158   676846478        21   195666 \n" +
  "       92559356      39       2365         7857962    38267953       33   557154\n" +
  "         3292341      972     71823         8717392    26879279       54   31984\n" +
  "           6212456      147    86217          219626     81812792      28   7245\n" +
  "            3729926       96   77739           4891594     2659148      34   497\n" +
  "              56712        97   8581            331754       73354       38   99",

  "   46877886688848747693697938436379649    94697363483979639674784888668877864   \n" +
  "    3837349847843643535473438636546397    7936456368343745353463487489437383    \n" +
  "     687686959997894958588367979374358    853473979763885859498799959686786     \n" +
  "       3347665639375568365343999997887    7887999993435638655739365667433       \n" +
  "9       636678657765596663676698645957    759546896676366695567756876636       9\n" +
  "538           476643373398538777333789    987333777835893373346674           835\n" +
  "9844                                                                        4489\n" +
  "78435                                                                      53487\n" +
  "  7954                       6695559985445899555966                       4597  \n" +
  "  6543    6588     855439558433858355488884553858334855934558     8856    3456  \n" +
  "  3899    694363474888954598837545556344443655545738895459888474363496    9983  \n" +
  "  4453    7438377539885679359553                3559539765889357738347    3544  \n" +
  "  9379    555777456556                                    655654777555    9739  \n" +
  "  6936    574                                                      475    6396  \n" +
  "  6599    767                                                      767    9956  \n" +
  "  9496    397      37338                                83373      793    6949  \n" +
  "  6799    869       3379887887                    7887889733       968    9976  \n" +
  "  8685    789        97977884765667986    68976656748877979        987    5868  \n" +
  "  4564    736         4346357537995937    7395997357536434         637    4654  \n" +
  "  6874    339   9     6495758   677895    598776   8575946     9   933    4786  \n" +
  "  5337    543   83     473865   598353    353895   568374     38   345    7335  \n" +
  "  6339    988   633     86844   673348    843376   44868     336   889    9336  \n" +
  "  7379    399   7634     6548976383989    9893836798456     4367   993    9737  \n" +
  "  3688    773   5388       45684636957    75963648654       8835   377    8863  \n" +
  "  5749    533   94835                                      53849   335    9475  \n" +
  "  4989    938   547677                                    776745   839    9894  \n" +
  "  9598    457   5974499       75985463    36458957       9944795   754    8959  \n" +
  "  8974    368   6386949       788   55    55   887       9496836   863    4798  \n" +
  "  9985    997   7986498        63   34    43   36        8946897   799    5899  \n" +
  "  56997   765   8636743         3   96    69   3         3476368   567   79965  \n" +
  "  67348   437   6763363   77     67757    75776     77   3633676   734   84376  \n" +
  "  67989   666   4   746   69       896    698       96   647   4   666   98976  \n" +
  "  83796   976   8   5588  956       49    94       659  8855   8   679   69738  \n" +
  "  53368   399   8   7383  7596                    6957  3837   8   993   86335  \n" +
  "5848365   474   53984759  598335                533895  95748935   474   5638485\n" +
  "3575734   883   68394485  9696754              4576969  58449386   388   4375753\n" +
  "4599855   675   58979646  5759733   994  499   3379575  64697985   576   5589954\n" +
  "          376   49949873  6         355  553         6  37894994   673          \n" +
  "          469                       45544554                       964          \n" +
  "          953                         6996                         359          \n" +
  "          953                         6996                         359          \n" +
  "          469                       45544554                       964          \n" +
  "          376   49949873  6         355  553         6  37894994   673          \n" +
  "4599855   675   58979646  5759733   994  499   3379575  64697985   576   5589954\n" +
  "3575734   883   68394485  9696754              4576969  58449386   388   4375753\n" +
  "5848365   474   53984759  598335                533895  95748935   474   5638485\n" +
  "  53368   399   8   7383  7596                    6957  3837   8   993   86335  \n" +
  "  83796   976   8   5588  956       49    94       659  8855   8   679   69738  \n" +
  "  67989   666   4   746   69       896    698       96   647   4   666   98976  \n" +
  "  67348   437   6763363   77     67757    75776     77   3633676   734   84376  \n" +
  "  56997   765   8636743         3   96    69   3         3476368   567   79965  \n" +
  "  9985    997   7986498        63   34    43   36        8946897   799    5899  \n" +
  "  8974    368   6386949       788   55    55   887       9496836   863    4798  \n" +
  "  9598    457   5974499       75985463    36458957       9944795   754    8959  \n" +
  "  4989    938   547677                                    776745   839    9894  \n" +
  "  5749    533   94835                                      53849   335    9475  \n" +
  "  3688    773   5388       45684636957    75963648654       8835   377    8863  \n" +
  "  7379    399   7634     6548976383989    9893836798456     4367   993    9737  \n" +
  "  6339    988   633     86844   673348    843376   44868     336   889    9336  \n" +
  "  5337    543   83     473865   598353    353895   568374     38   345    7335  \n" +
  "  6874    339   9     6495758   677895    598776   8575946     9   933    4786  \n" +
  "  4564    736         4346357537995937    7395997357536434         637    4654  \n" +
  "  8685    789        97977884765667986    68976656748877979        987    5868  \n" +
  "  6799    869       3379887887                    7887889733       968    9976  \n" +
  "  9496    397      37338                                83373      793    6949  \n" +
  "  6599    767                                                      767    9956  \n" +
  "  6936    574                                                      475    6396  \n" +
  "  9379    555777456556                                    655654777555    9739  \n" +
  "  4453    7438377539885679359553                3559539765889357738347    3544  \n" +
  "  3899    694363474888954598837545556344443655545738895459888474363496    9983  \n" +
  "  6543    6588     855439558433858355488884553858334855934558     8856    3456  \n" +
  "  7954                       6695559985445899555966                       4597  \n" +
  "78435                                                                      53487\n" +
  "9844                                                                        4489\n" +
  "538           476643373398538777333789    987333777835893373346674           835\n" +
  "9       636678657765596663676698645957    759546896676366695567756876636       9\n" +
  "       3347665639375568365343999997887    7887999993435638655739365667433       \n" +
  "     687686959997894958588367979374358    853473979763885859498799959686786     \n" +
  "    3837349847843643535473438636546397    7936456368343745353463487489437383    \n" +
  "   46877886688848747693697938436379649    94697363483979639674784888668877864   ",

  "448 4822711528748 5787788355858547855887 427245 1732172 84116846 352424623182643\n" +
  "65223712268228481 218 536465173138267 4542274538885548824162437 14557 2714826633\n" +
  "485211732 8 7853786127573336 4358112326322268421372 231147373175256314566   41 4\n" +
  "563688 253666851368 423871674871257717686615676445622853483712235 48537523774825\n" +
  " 4 64153516464 8 631141682 53667112 6448856841168 266 47148 6212 5156414 413258 \n" +
  "7657551745777584 65  6277 62361413 716 234735873136 634 41234545 51 72621172764 \n" +
  "2263  17 6231 171438656747 134 16516 262163636184278 558412757564567237645268228\n" +
  "86315  173 1252 3 45512423337823122642716887  561 855 262 187785 25774 5525 2838\n" +
  "435 737 8311748 666 288  65 16234178258 471764233287176 2384584554 1 37 5861 82 \n" +
  "255275838 3762488154714414361483553334 17345177871253868645 83167752216551378  8\n" +
  "721 4331287 82127155765  34871 62424643583777726556 34 32714681648882457576 6821\n" +
  "46355135673733335212522 222 33477377758653165677727623464584426478 115 183536 46\n" +
  "5 264 146 7471618651468 6852163522478668533536855 5685843221 88185 46 85253832 7\n" +
  "3  26 12534323742 72 42835 35 2 14 17  737867751 73 4713551164743472 1 8363327 6\n" +
  "116315 6138225655 3417 418 5427 18 77135825558363  1385856368534  88755315767544\n" +
  "13 82625462535225427172 8  5   1786823788247 4131226 21 5165173 5 661378245 8515\n" +
  "6271 242 438 5537845663 1 65 47554 2 14823 5154  585158253481 627 2144884227874 \n" +
  "75261334854378378422728824 2472 6  465848 871748 1 67 82642724642534523848766621\n" +
  "7  258771638166412 861567586 25413456 86651447625156  728685516 5211762655 77457\n" +
  "414122111757256132844 773842 284 1 1717472715 1 33233   24 611484554743218811624\n" +
  "31713856851 48384277114328744357585 412 6515  745668714747 616434 1 432613612685\n" +
  "8115765611348578657 534172353 251672412672 4587 62168243537862513657762454556322\n" +
  "66 2651 6533563734238735528 1634632574 821  565265 3852 13 136 517 73863 322765 \n" +
  "417 251425843717 52425 8341 76888142143252623825112 32 347224 358888 63281382 48\n" +
  "  5524434333526 1 8211355 43 15286 225488688323754764532665817 87751638214834 17\n" +
  "382 164856522111142 5474688843735564155785 44247135 823842567 18645718146517 235\n" +
  "11655 52 44781384672 2118 762627146542485532638  785238314 2 556 5778657 62 5 8 \n" +
  "747751332268  21 41215818352831643875154131725 4 631231377 87 646466 412 1128425\n" +
  "274 5 63338 87 4242875652678736425363838834 13847 81723 1 4473181764214275253651\n" +
  "8 3432581685336 718 21 67 48514781175252661373243717447188 538236314414218111168\n" +
  "38  7372 6821214635472116141821561446373 4 33556365226721434388581 32 4786 8841 \n" +
  "36247756 6 44 61436625847528363  2648 21 7 744 1514166763715226685275 8436561475\n" +
  "51 33367238 136644518421137854483317364311855243386  117 12578 443848256523 4641\n" +
  "14318558484 7884584 1385167886487731573157535 86 611138734152 25 3383156 26533 1\n" +
  "7371 24 153483715287571 18334 6384567482267566264475767828888 8481388122385568  \n" +
  "3448163  242 3671 8  6 8 17 61 6225 272  66547183325237672 63232275865821 1833 2\n" +
  "53162381723581271 12776 251721186342252422817458311288113256 1334223 542287234 3\n" +
  "6877334311653337857651318371576647751 7122 54583 68  54 13 284751665785463 68748\n" +
  "85172821 827111334631557733638 713222 63 637 66 774 38418176337831436 2 1  64483\n" +
  "2321164784712774 1 231532572 8 7766353 4134336427336528724245348 778427388 73282\n" +
  "242377666 63323 682367382 127 3864416 5631774446 7  6268818 7755516 6358 1853688\n" +
  "31441 1188 736157553126 37575734124 1 774682561584211317 6162 63325 7 272446824 \n" +
  " 2717 74771154845263 486355873133375377 31522517254 6662846745741  7231 35757633\n" +
  "62 3775632587 378544534 8728636424726162 7687822743 136 14357345375548238 3445 6\n" +
  "7 134  3341 117212538  44757456 325446213623784 7314388667   262573 4 46355165 5\n" +
  "5511214758 574512735486734167124764348273741 252 7386522442 72733631882117354665\n" +
  "52 713312651 2426345453384283358713 2 2 4488 47442715 3472884842411671 413524633\n" +
  " 2128 813837181431617 134351766  435 84887661 8115811761838771561 52373177358 78\n" +
  " 2452 134837213 1 23 5324155 141472 83162 678265372 7572 727713512823658 1886573\n" +
  "477327813226553126685 443553626887853625323 16116 14378872831  5412574512 354288\n" +
  "365787111415555872   7 2 818 15 44 264125462444728733452412287 257372724 6133725\n" +
  "5477161 436  67887342124 5144454735 367825 85  4574555 512768554814266617782352 \n" +
  "8848 324881764567467662825283611 821621777778 525684 383 5658371 58261 7 7851252\n" +
  "7 628 528 16527786634313432214261852343183335117533561444  314747883837615527456\n" +
  "3534632 6611181778361536724572545  377 64681 843243 77 1871 267553216423751761 8\n" +
  "3158156121878 6 452144 6563 388543456365 141525127648528478832828354772242337445\n" +
  "826 8843587583582647355618876 46647122 636227834777188634171538 1656168411 36528\n" +
  "22226533 66838267315 346478627 662536 258 4   56774228551156 2156614611425744 18\n" +
  "67518 137222248556571244862 12 165376 763 18751635214537278542445786 46 433 6 78\n" +
  "5236468828 83286354253372175 628413168422354 24261782 624481264 7 8438 2 7854866\n" +
  "76 37777  464  8427158544113663758838352864824665685376681526 872833887578 52568\n" +
  "758 86622   1686 7751814 64754  258284 2631752278171252636426212 88 8632 844 278\n" +
  "324 3648471246868136324 6585341184214244 2 47628178764558 62766 4232 6638872873 \n" +
  "7462 758254335 1 5 7466156752321447746223  288 83757243241475754753 277682875755\n" +
  "378264 531  173547842334816358641635663 2  44368 6868531726 1428  4278 8848 774 \n" +
  "746771534 8645 6 45 547656783316242346471616824 8161484215277224171 383571  8 74\n" +
  "352661 133683247 57 2375637 31487 7868846224424284 5428844828 6632642841  545 53\n" +
  "347 33  7457464 5135368146 864684142417723727785521687 476641  3212681  72527413\n" +
  "8316623658615735476521 588877346 2232782 41231562 825 54 3711 266 36217463232274\n" +
  "64416222 5514 14 1 861 66376  4438838423 8458526 6212437215 26816645625821555738\n" +
  "  286417566154286 46823453584 44 58184 48 7864454  1181782 631736667518673764541\n" +
  "82432 4 633 5341331 8524861245655656 472 3 1836 27583 71  6372277776583611671783\n" +
  "5651 575155578573656  15 4611 3 167781658 1473156888111157321 782 72538444123571\n" +
  "43 45873318621813357 5 4368761 51 6581543352853 28  55  13235437887438 86238  47\n" +
  "61221181 33838148736582216 816834 125 136523 633 371835712 86 6115 231411718 52 \n" +
  "875586 772 7611557 623731457288163412368222451227126775288553222 2 8612221 73857\n" +
  "322545888445336842 4171274 37727455172415767  28 388457863 384  8337668116734356\n" +
  "2 6451185457673428262521638 23317371 34317814528335826 54548852 637 586568656317\n" +
  "88 12 6735472121 572 4 7216444 173668 7661342 36135817788438135663 82836163735 5\n" +
  "648861712783 2 478834 81635143574637477224211233215278488682 675448  61765126313",

  "             79      57      35      9                69      46      24      89\n" +
  "     93      79      57      257      2               68      46      94      89\n" +
  "     93      79       79      47      24      8       68      46       46      9\n" +
  "      35      93      79      47      24      82       82      68      36       \n" +
  "      35      93    93 9       6        6       4       9                       \n" +
  "            35      93                                       82      68         \n" +
  "             57      35                              9       894      89      58\n" +
  "     79      57      25                               46      94      79      57\n" +
  "     79      47      24                                6      93      79      57\n" +
  "     79      46       46                                       3    9  93    9  \n" +
  "      92       8                                                     36      93 \n" +
  "            9                                                        35      93 \n" +
  "    25      82                                                7      35       35\n" +
  "    24       24                                                9      57      35\n" +
  "     46      24                                                       57    5 25\n" +
  "     46      24                                                     79      57  \n" +
  "                                                                    793      79 \n" +
  "    92                                                               93      79 \n" +
  "    82      6                                                        93      69 \n" +
  "    82      6                                                        92    9 682\n" +
  "    82                       3       9       79                       24    3582\n" +
  "     94                       5       3        3                            25  \n" +
  "   46                                                                       24  \n" +
  "   46                                                                        46 \n" +
  "    68                                                                       46 \n" +
  "    68                                                                       46 \n" +
  "    58                       9       79      47      24                    68  8\n" +
  "     7                5       3                                             82  \n" +
  "                                                                            82  \n" +
  "                                                                            82  \n" +
  " 5793                                                                        94 \n" +
  " 579                7               2       8       68                       94 \n" +
  "93 9                79      47       4       24       2                    46   \n" +
  "93                                                                         46   \n" +
  "93                                                                          68  \n" +
  " 35                                                                         58  \n" +
  " 35                      46                                                 57  \n" +
  " 25               82      68        8       6       46      93               79 \n" +
  "7  7                                 2       8                5                 \n" +
  "7                                                                               \n" +
  "79                                                                              \n" +
  "69                                                                          35  \n" +
  " 82               6      94      89      57       57                        35  \n" +
  " 82                                3                        79               5  \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "                                                                                \n" +
  "46                      5                3       9       79                     \n" +
  "46                       79      57       5       3                        6    \n" +
  "  8                                                                             \n" +
  "                                                                                \n" +
  "2                                                                        82     \n" +
  "2                                                       2                82     \n" +
  "94      8               3       93      79       79      4                2    8\n" +
  "93      79               57       5       3       9                            8\n" +
  "                                                                        4       \n" +
  "                                                                        46      \n" +
  "8      3                                                                46      \n" +
  "8      35                                       2                        68     \n" +
  "7       57                      69      46       4                     82 8    6\n" +
  "79       7                                8                            82      6\n" +
  "      79                                                               89      5\n" +
  "      79                                                                94      \n" +
  "5      93      7                                                 6    4 93      \n" +
  "5      93      79                                               36    4693    94\n" +
  "5    3593    9369                                                     36  5    3\n" +
  "      57 5    35 2                                                     58      3\n" +
  "      57      35                                               89      58      3\n" +
  "      57      25                                               79      57      3\n" +
  "      47       47      2                                       793    9479      \n" +
  "3      69    7946      24                               35      93    9379    7 \n" +
  "2      68    79 6       4                                     36      93      79\n" +
  "     93      69                                               35      93       9\n" +
  "      25      82      68                              5        57      35      9\n" +
  "      24      82      68      46      9        9       79      57    5735    3 9\n" +
  "      24      82    8 68       68      36      93      79      57    5725    358\n" +
  "    4 24       94    2489      58      35      93       9    7  79    79 7    57\n" +
  "8    6 46    46 4    24 9    82                               93      79      57\n" +
  "     68      46      94      89       89      57      35      93      79      47\n" +
  "     68      46       46      94      79      57      35      93      69       6",
];

let Spectator_102 = '{"name":"Spectator","level":1,"model":2,"size":0.025,"zoom":0.075,"specs":{"shield":{"capacity":[1e-30,1e-30],"reload":[1000,1000]},"generator":{"capacity":[1e-30,1e-30],"reload":[1,1]},"ship":{"mass":1,"speed":[200,200],"rotation":[1000,1000],"acceleration":[1000,1000]}},"bodies":{"face":{"section_segments":100,"angle":0,"offset":{"x":0,"y":0,"z":0},"position":{"x":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"y":[-2,-2,2,2],"z":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},"width":[0,1,1,0],"height":[0,1,1,0],"vertical":true,"texture":[6]}},"typespec":{"name":"Spectator","level":1,"model":2,"code":102,"specs":{"shield":{"capacity":[1e-30,1e-30],"reload":[1000,1000]},"generator":{"capacity":[1e-30,1e-30],"reload":[1,1]},"ship":{"mass":1,"speed":[200,200],"rotation":[1000,1000],"acceleration":[1000,1000]}},"shape":[0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001],"lasers":[],"radius":0.001}}';
let ships = [Spectator_102];
let map = maps[Math.trunc(Math.random() * maps.length)];

this.options = {
  // auto_assign_teams: true,
  custom_map: map,
  ships: ships,
  // root_mode: 'team',
  max_players: 30,
  crystal_value: 3,
  radar_zoom: 5,
  starting_ship: 800,
  asteroids_strength: maps.indexOf(map) !== 3 ? 0.2 : 0.5,
  speed_mod: 1.25,
  release_crystal: true,
  mines_self_destroy: false,
  projectile_speed: 1.2,
  hues: [180, 360],//[180, 120, 360],
  station_size: 1,
  station_crystal_capacity: 0.5,
  friendly_colors: 2,
  map_size: 80
};

function sortTeam(game) {
  let result = [];
  for (let i = 0; i < this.options.friendly_colors; i++) {
    result.push(game.ships.map(ship => { if (ship.team === i) return ship; }).filter(value => value !== undefined));
  }
  return result;
}

const map_size = this.options.map_size;
const radar_zoom = this.options.radar_zoom;

const colors = ['rgba(255, 0, 0, 1)', 'rgba(0, 255, 255, 1)'];
const colors_radar = ['rgba(255, 0, 0, 0.1)', 'rgba(0, 255, 255, 0.1)'];
const radar_radius = (map_size * 10) / radar_zoom;

const width = 1;
const radar_width = radar_radius * 10 / map_size;
const radar_pos = (radar_width - width) / 2;


const upgrades = [
  { id: "9", position: [25, 0, 20, 10], visible: true, clickable: true, shortcut: "9", components: [{ type: "box", position: [0, 0, 100, 100] }] },
  { id: "0", position: [45, 0, 20, 10], visible: true, clickable: true, shortcut: "0", components: [{ type: "box", position: [0, 0, 100, 100] }] }
];

const Gem = {
  id: 'gem',
  position: [66.4, 0, 6.6, 4],
  clickable: true,
  components: [
    { type: "box", position: [0, 0, 100, 100], fill: "rgba(68, 85, 102, 0)", stroke: "#cde", width: 5 },
    { type: "text", position: [0, 5, 100, 80], value: "Gem", color: "#cde" },
    { type: "box", position: [0, 85, 100, 15], fill: '#0ff' },  // bar
    { type: "box", position: [0, 85, 0, 15], fill: '#f00' }    // progress bar
  ]
};

const Spectator = {
  id: 'spectator',
  position: [73, 0, 6.6, 4],
  clickable: true,
  components: [
    { type: "box", position: [0, 0, 100, 100], fill: "rgba(68, 85, 102, 0)", stroke: "#cde", width: 5 },
    { type: "text", position: [5, 5, 90, 75], value: "Spectator", color: "#cde" },
    // button cooldown 
    { type: "box", position: [0, 85, 100, 15], fill: '#0ff' },  // bar 
    { type: "box", position: [0, 85, 0, 7.5], fill: '#FFA500' }, // progress effect
    { type: "box", position: [0, 92.5, 0, 7.5], fill: '#f00' } // progress cooldown
  ]
};

const ToogleMap = {
  id: 'map toogle',
  position: [59.8, 0, 6.6, 4],
  clickable: true,
  components: [
    { type: "box", position: [0, 0, 100, 100], fill: "rgba(68, 85, 102, 0)", stroke: "#cde", width: 5 },
    { type: "text", position: [0, 5, 100, 90], value: "Map", color: "#cde" },
  ]
};

const SPECTATOR = {
  args: {
    spectator: Spectator,
    end_time_spectator: 0,          //time end the spectator
    spectator_activated: 0,         // time activated button
    spectator_allowed_time: 0,      // time end the spectator 
    is_spectator: false,
    spectator_delay: 5 * 60 * 60,
    stats: {},    // button cooldown
    time_uses_spectator: 1.5 * 60 * 60,
  },
  methods: {
    ui_cooldown_effect: function (game, ship) {
      if (game.step <= ship.custom.end_time_spectator) {
        let time = ship.custom.end_time_spectator - game.step;
        ship.custom.spectator.components[3].position[2] = (time / ship.custom.time_uses_spectator) * 100;
      } else if (ship.custom.spectator.components[3].position[2] !== 0)
        ship.custom.spectator.components[3].position[2] = 0;
    },
    ui_button_cooldown: function (game, ship) {
      if (game.step <= ship.custom.spectator_allowed_time) {
        let time = ship.custom.spectator_allowed_time - game.step;
        ship.custom.spectator.components[4].position[2] = (time / ship.custom.spectator_delay) * 100;
      } else if (ship.custom.spectator.components[4].position[2] !== 0) {
        ship.custom.spectator.components[4].position[2] = 0;
        this.remove_effect(ship);
      }
    },
    activate_effect: function (ship) {
      if (ship.type != 102 && ship.custom.is_spectator) ship.set({ type: 102, collider: false });
    },
    remove_effect: ship => {
      if (game.step >= ship.custom.end_time_spectator && ship.custom.is_spectator) {
        ship.set(ship.custom.stats);
        ship.custom.is_spectator = false;
        for (let upgrade of upgrades) ship.setUIComponent({ id: upgrade.id, visble: false });
      }
    },
    button_clicked: function (ship, custom) {
      ship.type != 102 && (custom.stats = { type: ship.type, stats: ship.stats, collider: true, shield: ship.shield, generator: ship.generator, crystals: ship.crystals, invulnerable: 120 });
      if (!custom.is_spectator && game.step >= custom.spectator_allowed_time) {
        custom.is_spectator = true;

        custom.spectator_activated = game.step;
        custom.spectator_allowed_time = game.step + custom.spectator_delay;
        custom.end_time_spectator = game.step + custom.time_uses_spectator;
        this.activate_effect(ship);

        for (let upgrade of upgrades) ship.setUIComponent(upgrade);
      } else if (custom.is_spectator) {
        ship.custom.end_time_spectator = game.step;
        this.remove_effect(ship);
      }
    },
    show_activate_button: ship => ship.setUIComponent(ship.custom.spectator)
  }
};
const GEM = {
  args: {
    gem: Gem,
    gem_delay: 5 * 60 * 60,             // button cooldown
    gem_activated: 0,
    gem_cooldown_time: 0,
    value: 0,
  },
  methods: {
    show_activate_button: ship => ship.setUIComponent(ship.custom.gem),
    ui_button_cooldown: function (game, ship) {
      if (game.step < ship.custom.gem_cooldown_time) {
        let time = ship.custom.gem_cooldown_time - game.step;
        ship.custom.gem.components[3].position[2] = (time / ship.custom.gem_delay) * 100;
      } else if (ship.custom.gem.components[3].position[2] !== 0)
        ship.custom.gem.components[3].position[2] = 0;
    },
    button_clicked: function (ship, custom) {
      if (game.step > custom.gem_cooldown_time) {
        value = custom.leader ? 1 : 0.5;
        custom.value = Math.trunc(ship.type / 100) ** 2 * 5 * 4 * value;
        custom.gem_activated = game.step;
        custom.gem_cooldown_time = game.step + custom.gem_delay;

        ship.set({ crystals: ship.crystals + custom.value });
      }
    }
  }
};
const MAP = {
  args: {
    view_map: false,
    map: { id: 'map', position: [25, 5, 85 * 0.5625, 85], components: [] },
    toggle_map: ToogleMap
  },
  methods: {
    button_clicked(custom) { custom.view_map = !custom.view_map; },
    show_activate_button: ship => ship.setUIComponent(ship.custom.toggle_map),
    convert_Pos: (x, y) => [(map_size * 5 + x), (map_size * 5 - y - 1)],
    checkPos(pos1, pos2) {
      let [x1, y1, width] = pos1;
      let [x2, y2] = pos2;
      return (y1 < y2 && y2 < y1 + width) && (x1 < x2 && x2 < x1 + width);
    },
    ships_components(ships, ship) {
      return ships.map(space_ship => {
        const [x, y] = this.convert_Pos(space_ship.x, space_ship.y).map(i => (i - width * 0.5) / map_size * 10);

        let result = [
          space_ship.team === ship.team ?
            { type: 'box', position: [x, y, width, width], fill: colors[space_ship.team] } :
            { type: 'box', position: [x, y, width, width], fill: colors[space_ship.team] },
        ];
        return result;
      }).flat();
    },
    radars_components(radars, ship) {
      return radars.map(radar => {
        const [x, y] = this.convert_Pos(radar.x, radar.y).map(i => ((i - width * 0.5) / map_size * 10) - radar_pos);

        let result = [{ type: 'box', position: [x, y, radar_width, radar_width], fill: colors_radar[ship.team] }];

        let x2 = radar_width + x > 100 ? -100 + x : x;
        let y2 = radar_width + y > 100 ? -100 + y : y;

        let x3 = x < 0 ? 100 + x : x;
        let y3 = y < 0 ? 100 + y : y;

        if (x2 != x) {
          result.push({ type: 'box', position: [x2, y, radar_width, radar_width], fill: result[0].fill });
          if (y2 != y) result.push({ type: 'box', position: [x2, y2, radar_width, radar_width], fill: result[0].fill });
          if (y3 != y) result.push({ type: 'box', position: [x2, y3, radar_width, radar_width], fill: result[0].fill });
        }
        if (y2 != y) result.push({ type: 'box', position: [x, y2, radar_width, radar_width], fill: result[0].fill });

        if (x3 != x) {
          result.push({ type: 'box', position: [x3, y, radar_width, radar_width], fill: result[0].fill });
          if (y2 != y) result.push({ type: 'box', position: [x3, y2, radar_width, radar_width], fill: result[0].fill });
          if (y3 != y) result.push({ type: 'box', position: [x3, y3, radar_width, radar_width], fill: result[0].fill });
        }
        if (y3 != y) result.push({ type: 'box', position: [x, y3, radar_width, radar_width], fill: result[0].fill });

        return result;
      }).flat(2);
    },
    drawMap(ships, ship) {
      let result = [{ type: 'box', position: [0, 0, 100, 100], fill: 'rgba(100, 100, 100, 0.5)' }];
      let allies = ships.filter(value => value.team == ship.team);
      let enemies = ships.filter(value => value.team != ship.team);
      let radars = allies.map(function (i) { return { x: i.x, y: i.y, team: i.team }; });

      result.push(this.ships_components(allies, ship));
      enemies_components = this.ships_components(enemies, ship);
      radars_components = this.radars_components(radars, ship);

      for (let radar of radars_components) for (let enemy of enemies_components)
        if (this.checkPos(radar.position.slice(0, 3), enemy.position.slice(0, 2)) && !result.includes(enemy)) result.push(enemy);

      result.push(radars_components);
      return result.flat(2);
    },
    view_map(ship) {
      if (ship.custom.view_map) {
        ship.custom.map.components = this.drawMap(game.ships, ship);
        ship.setUIComponent(ship.custom.map);
      } else ship.setUIComponent({ id: 'map', visible: false });
    }
  }
};
const PLAYERS_LIST = {

}
const LEADER = {
  setup: (ship) => {
    if (!ship.custom.leader) {
      ship.custom.leader = true;
      Object.assign(ship.custom, SPECTATOR.args, MAP.args, GEM.args, { leader: true })
      SPECTATOR.methods.show_activate_button(ship);
      GEM.methods.show_activate_button(ship);
      MAP.methods.show_activate_button(ship);
    };
  },

  methods(game, ship) {
    if (ship.custom.leader) {

      SPECTATOR.methods.ui_button_cooldown(game, ship);
      SPECTATOR.methods.ui_cooldown_effect(game, ship);
      SPECTATOR.methods.remove_effect(ship);
      SPECTATOR.methods.show_activate_button(ship);

      GEM.methods.ui_button_cooldown(game, ship);
      GEM.methods.show_activate_button(ship);

      MAP.methods.view_map(ship);
    }
  }
}
this.tick = function (game) {
  if (game.step % 60 === 0) {
    game.ships.forEach((ship) => { LEADER.setup(ship); });
  }
  if (game.step % 45 === 0) {
    game.ships.forEach((ship) => { LEADER.methods(game, ship); });
  }
};
this.event = function (event, game) {
  let ship = event.ship;
  let custom = ship.custom;
  switch (event.id) {
    case 'spectator':
      SPECTATOR.methods.button_clicked(ship, custom);
      break;
    case 'gem':
      GEM.methods.button_clicked(ship, custom);
      break;
    case 'map toogle':
      MAP.methods.button_clicked(custom);
      break;
  }
  switch (event.name) {
    case 'ship_destroyed':
      break;
    case 'ship_spawned':
      break;
    case "ship_disconnected":
      break;
    default:
      break;
  }
};

; (function () {
  var internals_init = function () {
    if (game.custom.shipDisconnected_init) return;
    const modding = game.modding;
    const internals = Object.values(modding).find(val => val && typeof val.shipDisconnected === "function");
    if (!internals) {
      modding.terminal.error(new Error("Failed to initialize 'ship_disconnected' event: modding internals object not found"));
      return;
    }
    if (!internals.shipDisconnected.old) {
      function shipDisconnected({ id } = {}) {
        if (modding.context.event && id) var ship = game.findShip(id);
        var result = shipDisconnected.old.apply(this, arguments);
        if (ship) try { modding.context.event({ name: "ship_disconnected", ship }, game); } catch (e) { }
        return result;
      }
      shipDisconnected.old = internals.shipDisconnected;
      internals.shipDisconnected = shipDisconnected;
    }
    game.custom.shipDisconnected_init = true;
  }
  var tick = this.tick;
  this.tick = function (game) {
    this.tick = tick;
    internals_init();
    this.tick(game);
  }
}).call(this);



























